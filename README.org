* Using REPL

** Installation

In your REPL please eveluate the following:

#+BEGIN_EXAMPLE
CL-USER> (push #p "~/Programming/Lisp/cl-data-structures/" asdf:*central-registry*)
CL-USER> (ql:quickload :cl-data-structures)
CL-USER> (in-package :cl-data-structures)

CL-DS> (ql:quickload :codex)

CL-DS> (codex:document :cl-data-structures)
#+END_EXAMPLE

** Testing

There was a problem with tests. Slight modification allows to run the following:

#+BEGIN_EXAMPLE
; load the :cl-data-structures system

CL-DS> (ql:quickload :prove)

CL-DS> (prove:run "~/Programming/Lisp/cl-data-structures/test/dicts/functional-dictionary-test-suite.lisp")
#+END_EXAMPLE

I need discussion with the author about possible fix.


* My notes

** TODOs

*** Quadtree

**** references
https://github.com/gwkkwg/cl-containers/blob/master/dev/quad-tree.lisp

**** add

***** missing API methods
I guess it means adding those methods in cl-data-structures folder either by
specialising the quad-tree class from cl-containers or just calling methods that
will call instances of that class.

***** copy-on-write

**** strategy
Using (cerror "foo" "bar") inserted in the existing tests find how object are
created and then relevant methods are called.

***** object creation
file /cl-data-structures/src/dicts/hamt/api.lisp line 18
#+BEGIN_SRC lisp
  (-> make-functional-hamt-dictionary ((-> (t) fixnum)
                                       (-> (t t) boolean)
                                       &key (:max-depth (integer 1 11)))
      functional-hamt-dictionary)
  (defun make-functional-hamt-dictionary (hash-fn equal-fn &key (max-depth 8))
    "@b(Arguments and Values:)
     @begin(list)
     @item(hash-fn -- function that will be used to hash keys. Should return fixnum and follow all rules of hashing.)
     @item(equal-fn -- function that will be used to resolve hash conflicts.)
     @item(max-depth -- how many levels this hamt can have at most?)
     @end(list)

     @b(Description:)
     Constructs and returns new functional-hamt-dictionary object.

     @b(Notes:)
     In theory, HAMT can use infinite length of HASH, but this implementation uses 60 oldest bits at most."
    (assert (<= max-depth 10))
    (assert (> max-depth 0))
    (assure functional-hamt-dictionary (make-instance 'functional-hamt-dictionary
                                                      :hash-fn hash-fn
                                                      :root nil
                                                      :max-depth max-depth
                                                      :equal-fn equal-fn)))
#+END_SRC



***** adding file to the project
Should I add a folder something like:
cl-data-structures/src/dicts/quad tree ?

** IRC
Leaving notes for a user to read later
#+BEGIN_EXAMPLE
,memo username my memo text
#+END_EXAMPLE

* HAMT paper
http://lampwww.epfl.ch/papers/idealhashtrees.pdf

** Introduction
p 1

The Hash Array Mapped Trie (HAMT) is based on the simple notion of hashing
a key and storing the key in a trie based on this hash value. The AMT is used
to implement the required structure efficiently.


** Essentials of the Array Mapped Trie
p 2

Optimised for 32 bit architecture but can be easily adapted to 64 bit.

A trie is represented by a node and number of arcs leading to sub-tries and each
arc represents a member of an alphabet of possible alternatives.

The AMT data structure uses just two 32 bit words per node for a good compro-
mise, achieving fast traversal at a cost of only one bit per empty arc. An integer bit
map is used to represent the existence of each of the 32 possible arcs and an associ-
ated table contains pointers to the appropriate sub-tries or terminal nodes. A one
bit in the bit map represents a valid arc, while a zero an empty arc. The pointers
in the table are kept in sorted order and correspond to the order of each one bit in
the bit map.

** Ideal hashing
p 3


finished reading on p 4 3.1 Search for a key

** Partition hashing external storage
p 10

** Sorted order AMT
p 14

** IP routing
p 15

** Class-selector dispatch
p 16

** Performance comparisons
p18
